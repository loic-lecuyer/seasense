{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/header/header.component.ts","./src/app/components/header/header.component.html","./src/app/guards/jwt-guard.ts","./src/app/interceptor/jwt-interceptor.ts","./src/app/materials/capabilities/turret/turret-move-speed-capability.ts","./src/app/materials/capabilities/unit/unit-reboot-capability.ts","./src/app/materials/day-camera.ts","./src/app/materials/factory.ts","./src/app/materials/inertial-measurement.ts","./src/app/materials/lazer-measurement.ts","./src/app/materials/site.ts","./src/app/materials/thermal-camera.ts","./src/app/materials/turret.ts","./src/app/materials/unit.ts","./src/app/pages/configuration/configuration.component.ts","./src/app/pages/configuration/configuration.component.html","./src/app/pages/home/home.component.ts","./src/app/pages/login/login.component.ts","./src/app/pages/login/login.component.html","./src/app/services/http.service.ts","./src/app/services/site.service.ts","./src/app/services/user.service.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { JwtGuard } from './guards/jwt-guard';\r\nimport { ConfigurationComponent } from './pages/configuration/configuration.component';\r\nimport { HomeComponent } from './pages/home/home.component';\r\nimport { LoginComponent } from './pages/login/login.component';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: '/home', pathMatch: 'full' },\r\n  { path: 'home', component: HomeComponent, canActivate: [JwtGuard]},\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'configuration', component: ConfigurationComponent }  \r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [\r\n    RouterModule,\r\n    MatTooltipModule\r\n  ]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'seasense-client';\n}\n","<app-header></app-header>\r\n<router-outlet></router-outlet>\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HomeComponent } from './pages/home/home.component';\r\nimport { LoginComponent } from './pages/login/login.component';\r\nimport { ConfigurationComponent } from './pages/configuration/configuration.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { HeaderComponent } from './components/header/header.component';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpService } from './services/http.service';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { UserService } from './services/user.service';\r\nimport { JwtInterceptor } from './interceptor/jwt-interceptor';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\n/** Http interceptor providers in outside-in order */\r\nexport const httpInterceptorProviders = [\r\n  { provide: HTTP_INTERCEPTORS, useClass: JwtInterceptor, multi: true },\r\n];\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    LoginComponent,\r\n    ConfigurationComponent,\r\n    HeaderComponent    \r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MatButtonModule,\r\n    MatSelectModule,\r\n    MatToolbarModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatMenuModule,\r\n    MatFormFieldModule,\r\n    MatInputModule ,\r\n    FormsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [HttpService, UserService, httpInterceptorProviders],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Observable, Subscription } from 'rxjs';\r\nimport { LogoutResponse } from '../../api/http/logout-response';\r\nimport { Site } from '../../materials/site';\r\nimport { Unit } from '../../materials/unit';\r\nimport { HttpService } from '../../services/http.service';\r\nimport { SiteService } from '../../services/site.service';\r\nimport { UserService } from '../../services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  private siteLoadedSubscription: Subscription;\r\n  public units: Unit[] = [];\r\n  public selectedUnitId: string | undefined = undefined;\r\n  constructor(public userService: UserService, private httpService: HttpService, private router: Router, private siteService: SiteService) {\r\n    this.siteLoadedSubscription = this.siteService.siteLoadedSubject.subscribe((site: Site | undefined) => {\r\n      if (site == null) this.units = [];\r\n      else this.units = site.units;\r\n      this.selectedUnitId = this.siteService.selectedUnit?.id;\r\n    });\r\n  }\r\n  onConfigurationButtonClick() {\r\n    this.router.navigate(['/configuration'])\r\n  }\r\n  ngOnDestroy() {\r\n    this.siteLoadedSubscription.unsubscribe()\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n  onHomeClick() {\r\n  }\r\n  onSelectedUnitChange(unitId: string) {\r\n    this.siteService.selectUnitById(unitId);    \r\n  }\r\n  onLogoutClick() {\r\n    this.httpService.logout().subscribe({\r\n      next: (response: LogoutResponse) => {\r\n        this.userService.clearToken();\r\n        this.userService.clearUser();\r\n        this.router.navigate(['/login'])\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.userService.clearToken();\r\n        this.userService.clearUser();\r\n        this.router.navigate(['/login'])\r\n      },\r\n    });  \r\n  }\r\n}\r\n","<mat-toolbar class=\"display-flex\" color=\"primary\">\r\n  <div class=\"display-flex flex-1 flex-align-end\">\r\n    <button [matMenuTriggerFor]=\"menu\" mat-button>\r\n      <mat-icon aria-hidden=\"false\" aria-label=\"Example home icon\">view_headline</mat-icon>\r\n    </button>\r\n    <mat-menu #menu=\"matMenu\">\r\n      <button (click)=\"onConfigurationButtonClick()\" mat-menu-item>Configuration</button>\r\n      <button mat-menu-item>Camera</button>\r\n      <button mat-menu-item>Sav</button>\r\n    </mat-menu>\r\n    <div matTooltip=\"Go to home page\" (click)=\"onHomeClick()\" class=\"title\">Seasens</div>\r\n    <div matTooltip=\"Go to home page\" (click)=\"onHomeClick()\" class=\"sub-title\">By Exavision</div>\r\n    <div class=\"flex-1\"></div>\r\n    <div *ngIf=\"this.userService.user != null\" class=\"display-flex\">\r\n      <mat-label class=\"margin-4\">Unit :</mat-label>\r\n      <mat-select [(value)]=\"selectedUnitId\" #unitSelect (selectionChange)=\"onSelectedUnitChange(unitSelect.value)\" class=\"unit-select margin-4\">\r\n        <mat-option [value]=\"unit.id\" *ngFor=\"let unit of units\">\r\n          {{unit.displayName}}\r\n        </mat-option>\r\n      </mat-select>\r\n    </div>\r\n    <button *ngIf=\"this.userService.user != null\" (click)=\"onLogoutClick()\" mat-raised-button color=\"accent\">Logout</button>\r\n  </div>\r\n</mat-toolbar>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { ValidateTokenResponse } from '../api/http/validate-token-response';\r\nimport { HttpService } from '../services/http.service';\r\nimport { UserService } from '../services/user.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class JwtGuard implements CanActivate {\r\n  constructor(private router: Router, private userService: UserService, private httpService: HttpService) { }\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\r\n\r\n    return new Promise<boolean | UrlTree>((resolve, reject) => {\r\n      this.httpService.validateToken().subscribe({\r\n        next: (response: ValidateTokenResponse) => {\r\n          resolve(true);\r\n        },\r\n        error: (err: HttpErrorResponse) => {\r\n          this.router.navigate(['/login'])\r\n          reject(false);\r\n\r\n        },\r\n      });  \r\n    });\r\n     \r\n\r\n    \r\n  }\r\n  \r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpEvent, HttpInterceptor, HttpHandler, HttpRequest\r\n} from '@angular/common/http';\r\n\r\nimport { Observable } from 'rxjs';\r\nimport { UserService } from '../services/user.service';\r\n\r\n/** Pass untouched request through to the next request handler. */\r\n@Injectable()\r\nexport class JwtInterceptor implements HttpInterceptor {\r\n\r\n  constructor(private userService: UserService) { }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler):\r\n    Observable<HttpEvent<any>> {\r\n    const userToken = this.userService.token;\r\n    if (userToken != undefined) {\r\n      const modifiedReq = req.clone({\r\n        headers: req.headers.set('Authorization', `Bearer ${userToken}`),\r\n      });\r\n      return next.handle(modifiedReq);    \r\n    }\r\n    return next.handle(req);    \r\n  }\r\n}\r\n","import { SettingCapability } from \"../../settings/setting-capability\";\r\nimport { Capability } from \"../capability\";\r\n\r\nexport class TurretMoveSpeedCapability implements Capability {\r\n  id: string;\r\n  constructor(settingCapability: SettingCapability) {\r\n    this.id = settingCapability.id;\r\n  }\r\n\r\n}\r\n","import { SettingCapability } from \"../../settings/setting-capability\";\r\nimport { Capability } from \"../capability\";\r\n\r\nexport class UnitRebootCapability implements Capability {\r\n  id: string;\r\n  constructor(settingCapability: SettingCapability) {\r\n    this.id = settingCapability.id;\r\n  }\r\n\r\n}\r\n","import { Capability } from \"./capabilities/capability\";\r\nimport { Factory } from \"./factory\";\r\nimport { Material } from \"./material\";\r\nimport { SettingCapability } from \"./settings/setting-capability\";\r\nimport { SettingMaterial } from \"./settings/setting-material\";\r\n\r\nexport class DayCamera implements Material  {\r\n  id: string;\r\n  materials: Material[];\r\n  capabilities: Capability[] = [];\r\n  displayName: string;\r\n  constructor(settingMaterial: SettingMaterial) {\r\n    this.id = settingMaterial.id;\r\n    this.materials = [];\r\n    this.displayName = settingMaterial.displayName;\r\n    let factory: Factory = new Factory();\r\n    settingMaterial.materials.forEach((settingMaterialChild: SettingMaterial) => {\r\n      let material: Material = factory.createMaterial(settingMaterialChild);\r\n      this.materials.push(material);\r\n    });\r\n    settingMaterial.capabilities.forEach((settingCapability: SettingCapability) => {\r\n      let capability: Capability = factory.createCapability(settingCapability);\r\n      this.capabilities.push(capability);\r\n    });\r\n  }\r\n  \r\n\r\n  \r\n}\r\n\r\n","import { SettingMaterial } from \"./settings/setting-material\";\r\nimport { Material } from \"./material\";\r\nimport { MaterialType } from \"./material-type\";\r\nimport { DayCamera } from \"./day-camera\";\r\nimport { ThermalCamera } from \"./thermal-camera\";\r\nimport { InertialMeasurement } from \"./inertial-measurement\";\r\nimport { LazerMeasurement } from \"./lazer-measurement\";\r\nimport { Unit } from \"./unit\";\r\nimport { Turret } from \"./turret\";\r\nimport { SettingCapability } from \"./settings/setting-capability\";\r\nimport { Capability } from \"./capabilities/capability\";\r\nimport { CapabilityType } from \"./capabilities/capability-type\";\r\nimport { TurretMoveSpeedCapability } from \"./capabilities/turret/turret-move-speed-capability\";\r\nimport { UnitRebootCapability } from \"./capabilities/unit/unit-reboot-capability\";\r\nexport class Factory {\r\n  createCapability(settingCapability: SettingCapability): Capability {\r\n    let capability: Capability | null = null;\r\n    switch (settingCapability.capabilityType) {\r\n      case CapabilityType.TurretMoveSpeed:\r\n        capability = new TurretMoveSpeedCapability(settingCapability);\r\n        break;\r\n      case CapabilityType.UnitReboot:\r\n        capability = new UnitRebootCapability(settingCapability);\r\n        break;\r\n    }\r\n    if (capability == null) throw 'Capability ' + settingCapability.capabilityType + ' not implemented !!!';\r\n    return capability;\r\n  }\r\n\r\n  public createMaterial(settingMaterial: SettingMaterial): Material  {\r\n    let material: Material | null = null;\r\n\r\n    switch (settingMaterial.materialType) {\r\n      case MaterialType.DayCamera:\r\n        material = new DayCamera(settingMaterial);      \r\n        break;\r\n      case MaterialType.ThermalCamera:\r\n        material = new ThermalCamera(settingMaterial);        \r\n        break;\r\n      case MaterialType.InertialMeasurement:\r\n        material = new InertialMeasurement(settingMaterial);      \r\n        break;\r\n      case MaterialType.LazerMeasurement:\r\n        material = new LazerMeasurement(settingMaterial);       \r\n        break;\r\n      case MaterialType.Unit:\r\n        material = new Unit(settingMaterial);\r\n        break;\r\n      case MaterialType.Turret:\r\n        material = new Turret(settingMaterial);\r\n        break;\r\n    }\r\n\r\n    if (material == null) throw 'Material ' + settingMaterial.materialType + ' not implemented !!!';\r\n    return material;\r\n  }\r\n}\r\n","import { Capability } from \"./capabilities/capability\";\r\nimport { Factory } from \"./factory\";\r\nimport { Material } from \"./material\";\r\nimport { SettingCapability } from \"./settings/setting-capability\";\r\nimport { SettingMaterial } from \"./settings/setting-material\";\r\n\r\nexport class InertialMeasurement implements Material {\r\n  id: string;\r\n  materials: Material[];\r\n  capabilities: Capability[] = [];\r\n  displayName: string;\r\n  constructor(settingMaterial: SettingMaterial) {\r\n    this.id = settingMaterial.id;\r\n    this.materials = [];\r\n    this.displayName = settingMaterial.displayName;\r\n    let factory: Factory = new Factory();\r\n    settingMaterial.materials.forEach((settingMaterialChild: SettingMaterial) => {\r\n      let material: Material = factory.createMaterial(settingMaterialChild);\r\n      this.materials.push(material);\r\n    });\r\n    settingMaterial.capabilities.forEach((settingCapability: SettingCapability) => {\r\n      let capability: Capability = factory.createCapability(settingCapability);\r\n      this.capabilities.push(capability);\r\n    });\r\n  }\r\n\r\n  \r\n}\r\n\r\n","import { Capability } from \"./capabilities/capability\";\r\nimport { Factory } from \"./factory\";\r\nimport { Material } from \"./material\";\r\nimport { SettingCapability } from \"./settings/setting-capability\";\r\nimport { SettingMaterial } from \"./settings/setting-material\";\r\n\r\nexport class LazerMeasurement implements Material {\r\n  id: string;\r\n  materials: Material[];\r\n  capabilities: Capability[] = [];\r\n  displayName: string;\r\n  constructor(settingMaterial: SettingMaterial) {\r\n    this.id = settingMaterial.id;\r\n    this.materials = [];\r\n    this.displayName = settingMaterial.displayName;\r\n    let factory: Factory = new Factory();\r\n    settingMaterial.materials.forEach((settingMaterialChild: SettingMaterial) => {\r\n      let material: Material = factory.createMaterial(settingMaterialChild);\r\n      this.materials.push(material);\r\n    });\r\n    settingMaterial.capabilities.forEach((settingCapability: SettingCapability) => {\r\n      let capability: Capability = factory.createCapability(settingCapability);\r\n      this.capabilities.push(capability);\r\n    });\r\n  }\r\n\r\n  \r\n}\r\n\r\n","import { Capability } from \"./capabilities/capability\";\r\nimport { Factory } from \"./factory\";\r\nimport { SettingCapability } from \"./settings/setting-capability\";\r\nimport { SettingSite } from \"./settings/setting-site\";\r\nimport { SettingUnit } from \"./settings/setting-unit\";\r\nimport { Unit } from \"./unit\";\r\n\r\n\r\nexport class Site {\r\n  public id: string;\r\n  public units: Unit[] = [];\r\n  public capabilities: Capability[] = [];\r\n  constructor(settingSite: SettingSite) {\r\n   \r\n    this.id = settingSite.id;\r\n    let factory: Factory = new Factory();\r\n    settingSite.units.forEach((settingUnit: SettingUnit) => {\r\n      let unit: Unit = new Unit(settingUnit);\r\n      this.units.push(unit);\r\n    });\r\n\r\n    settingSite.capabilities.forEach((settingCapability: SettingCapability) => {\r\n      let capability: Capability = factory.createCapability(settingCapability);\r\n      this.capabilities.push(capability);\r\n    });\r\n\r\n  }\r\n}\r\n\r\n","import { Capability } from \"./capabilities/capability\";\r\nimport { Factory } from \"./factory\";\r\nimport { Material } from \"./material\";\r\nimport { SettingCapability } from \"./settings/setting-capability\";\r\nimport { SettingMaterial } from \"./settings/setting-material\";\r\n\r\nexport class ThermalCamera implements Material {\r\n  id: string;\r\n  materials: Material[];\r\n  capabilities: Capability[] = [];\r\n  displayName: string;\r\n  constructor(settingMaterial: SettingMaterial) {\r\n    this.id = settingMaterial.id;\r\n    this.materials = [];\r\n    this.displayName = settingMaterial.displayName;\r\n    let factory: Factory = new Factory();\r\n    settingMaterial.materials.forEach((settingMaterialChild: SettingMaterial) => {\r\n      let material: Material = factory.createMaterial(settingMaterialChild);\r\n      this.materials.push(material);\r\n    });\r\n    settingMaterial.capabilities.forEach((settingCapability: SettingCapability) => {\r\n      let capability: Capability = factory.createCapability(settingCapability);\r\n      this.capabilities.push(capability);\r\n    });\r\n  }\r\n\r\n  \r\n}\r\n\r\n","import { Capability } from \"./capabilities/capability\";\r\nimport { Factory } from \"./factory\";\r\nimport { Material } from \"./material\";\r\nimport { SettingCapability } from \"./settings/setting-capability\";\r\nimport { SettingMaterial } from \"./settings/setting-material\";\r\n\r\nexport class Turret implements Material {\r\n\r\n  id: string;\r\n  materials: Material[];\r\n  capabilities: Capability[] = [];\r\n  displayName: string;\r\n  constructor(settingMaterial: SettingMaterial) {\r\n    this.id = settingMaterial.id;\r\n    this.materials = [];\r\n    this.displayName = settingMaterial.displayName;\r\n    let factory: Factory = new Factory();\r\n    settingMaterial.materials.forEach((settingMaterialChild: SettingMaterial) => {\r\n      let material: Material = factory.createMaterial(settingMaterialChild);\r\n      this.materials.push(material);\r\n    });\r\n    settingMaterial.capabilities.forEach((settingCapability: SettingCapability) => {\r\n      let capability: Capability = factory.createCapability(settingCapability);\r\n      this.capabilities.push(capability);\r\n    });\r\n  }\r\n\r\n}\r\n\r\n","import { Capability } from \"./capabilities/capability\";\r\nimport { Factory } from \"./factory\";\r\nimport { Material } from \"./material\";\r\nimport { SettingCapability } from \"./settings/setting-capability\";\r\nimport { SettingMaterial } from \"./settings/setting-material\";\r\n\r\n\r\nexport class Unit implements Material {\r\n  id: string;\r\n  materials: Material[];\r\n  capabilities: Capability[] = [];\r\n  displayName: string;\r\n  constructor(settingMaterial: SettingMaterial) {\r\n    let factory: Factory = new Factory();\r\n    this.id = settingMaterial.id;\r\n    this.materials = [];\r\n    this.displayName = settingMaterial.displayName;\r\n    settingMaterial.materials.forEach((settingMaterialChild: SettingMaterial) => {\r\n      let material: Material = factory.createMaterial(settingMaterialChild);\r\n      this.materials.push(material);\r\n    });\r\n    settingMaterial.capabilities.forEach((settingCapability: SettingCapability) => {\r\n      let capability: Capability = factory.createCapability(settingCapability);\r\n      this.capabilities.push(capability);\r\n    });\r\n  }\r\n    \r\n\r\n \r\n}\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-configuration',\r\n  templateUrl: './configuration.component.html',\r\n  styleUrls: ['./configuration.component.scss']\r\n})\r\nexport class ConfigurationComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<p>configuration works!</p>\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { GetSettingResponse } from '../../api/http/get-setting-response';\r\n\r\nimport { HttpService } from '../../services/http.service';\r\nimport { SiteService } from '../../services/site.service';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n\r\n  constructor(private httpService: HttpService, private siteService : SiteService) { }\r\n\r\n  ngOnInit(): void {\r\n    this.httpService.getSetting().subscribe({\r\n      next: (response: GetSettingResponse) => {\r\n        this.siteService.createSite(response);\r\n        \r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        \r\n      },\r\n    });  \r\n  }\r\n\r\n}\r\n","import { HttpErrorResponse } from '@angular/common/http';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { sha512 } from 'js-sha512';\r\nimport { LoginResponse } from '../../api/http/login-response';\r\nimport { HttpService } from '../../services/http.service';\r\nimport { UserService } from '../../services/user.service';\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  public login: string = \"sav\";\r\n  public password: string = \"sav\";\r\n  public loginRunning: boolean = false;\r\n  public errorMessage: string = \"\";\r\n\r\n  constructor(private httpService: HttpService, private userService: UserService,private router: Router) {\r\n   \r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n  async onConnectButtonClick() {\r\n    this.loginRunning = true;\r\n    this.userService.clearToken();\r\n    this.userService.clearUser();\r\n    this.errorMessage = \"\";\r\n    let hash: string = sha512(this.password);\r\n    this.httpService.login(this.login, hash).subscribe({\r\n      next: (response: LoginResponse) => {\r\n        this.userService.setToken(response.token);\r\n        this.userService.setUser(response.user);\r\n        this.loginRunning = false;\r\n        this.router.navigate(['/home'])\r\n      },\r\n      error: (err: HttpErrorResponse) => {\r\n        this.errorMessage = err.message;\r\n        this.loginRunning = false;\r\n      },\r\n    });  \r\n    \r\n  }\r\n\r\n}\r\n\r\n","<mat-card class=\"card-login\">\r\n  <mat-card-header>   \r\n    <mat-card-title><mat-icon class=\"icon-title\">face</mat-icon>Authentification</mat-card-title>\r\n    <mat-card-subtitle>Please identify yourself</mat-card-subtitle>\r\n  </mat-card-header>  \r\n  <mat-card-content>\r\n    <form>\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Login</mat-label>\r\n        <input [disabled]=\"loginRunning\" name=\"login\" [(ngModel)]=\"login\" matInput>\r\n      </mat-form-field>\r\n      <mat-form-field class=\"full-width\">\r\n        <mat-label>Password</mat-label>\r\n        <input [disabled]=\"loginRunning\" name=\"password\" [(ngModel)]=\"password\" type=\"password\" matInput>\r\n      </mat-form-field>\r\n    </form>\r\n    <mat-error *ngIf=\"errorMessage != ''\">{{errorMessage}}</mat-error>\r\n  </mat-card-content>\r\n  <mat-card-actions>\r\n    <button [disabled]=\"loginRunning\" class=\"full-width\" (click)=\"onConnectButtonClick()\" mat-button>Connect</button>\r\n\r\n  </mat-card-actions>\r\n</mat-card>\r\n\r\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { LoginRequest } from '../api/http/login-request';\r\nimport { LoginResponse } from '../api/http/login-response';\r\nimport { Observable } from 'rxjs';\r\nimport { ValidateTokenResponse } from '../api/http/validate-token-response';\r\nimport { ValidateTokenRequest } from '../api/http/validate-token-request';\r\nimport { LogoutResponse } from '../api/http/logout-response';\r\nimport { LogoutRequest } from '../api/http/logout-request';\r\nimport { GetSettingResponse } from '../api/http/get-setting-response';\r\nimport { GetSettingRequest } from '../api/http/get-setting-request';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpService {\r\n  private baseApiUrl: string = \"\";\r\n  private headers: HttpHeaders;\r\n  constructor(private http: HttpClient) {\r\n    this.headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8');\r\n  }\r\n  getApiUrl(path : string): string{\r\n    if (this.baseApiUrl == \"\") {\r\n      let url: string = \"\";\r\n      if (location.protocol !== 'https:') {\r\n        url += \"http://\";\r\n      }\r\n      else {\r\n        url += \"https://\";\r\n      }\r\n      url += window.location.hostname;\r\n      url += \":\";\r\n      url += window.location.port;\r\n      url += \"/api/\";     \r\n      this.baseApiUrl = url;\r\n    }\r\n \r\n    return this.baseApiUrl + path;\r\n  }\r\n  login(login: string, hash: string): Observable<LoginResponse> {\r\n    let url: string = this.getApiUrl(\"login\");\r\n    let req: LoginRequest = {\r\n      login: login,\r\n      passwordHash: hash\r\n    };\r\n    return this.http.post<LoginResponse>(url, req, { headers: this.headers });\r\n  }\r\n\r\n  logout(): Observable<LogoutResponse> {\r\n    let url: string = this.getApiUrl(\"logout\");\r\n    let req: LogoutRequest = { };\r\n    return this.http.post<LogoutResponse>(url, req, { headers: this.headers });\r\n  }\r\n\r\n  validateToken(): Observable<ValidateTokenResponse> {\r\n    let url: string = this.getApiUrl(\"token/validate\");\r\n    let req: ValidateTokenRequest = {};\r\n    return this.http.post<ValidateTokenResponse>(url, req, { headers: this.headers });\r\n  }\r\n  getSetting(): Observable<GetSettingResponse> {\r\n    let url: string = this.getApiUrl(\"setting/get\");\r\n    let req: GetSettingRequest = {};\r\n    return this.http.post<GetSettingResponse>(url, req,{ headers: this.headers });\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { GetSettingResponse } from '../api/http/get-setting-response';\r\nimport { Site } from '../materials/site';\r\nimport { Unit } from '../materials/unit';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SiteService {\r\n \r\n  public siteLoadedSubject: Subject<Site | undefined> = new Subject<Site | undefined>();\r\n  public unitSelectedSubject: Subject<Unit | undefined> = new Subject<Unit | undefined>();\r\n  public site: Site | undefined = undefined;\r\n  public selectedUnit: Unit | undefined = undefined;\r\n\r\n  createSite(response: GetSettingResponse) {\r\n    this.site = undefined;    \r\n    if (response.site != null) {\r\n      this.site = new Site(response.site);      \r\n    }   \r\n    if (this.site != null && this.site.units.length > 0) {\r\n      this.selectUnitById(this.site.units[0].id);\r\n    }\r\n    this.siteLoadedSubject.next(this.site);\r\n  }\r\n\r\n  selectUnitById(unitId: string) {\r\n    let unit: Unit | undefined = this.site?.units.find((value: Unit) => {\r\n      return value.id == unitId;\r\n    });\r\n    this.selectedUnit = unit;\r\n    this.unitSelectedSubject.next(unit);\r\n  }\r\n\r\n  constructor() { }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { User } from '../models/user';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  \r\n  localStorage: Storage;\r\n  user: User | null;\r\n  token: string | null;\r\n  constructor() {\r\n    this.user = null;\r\n    this.token = null;\r\n    this.localStorage = window.localStorage;\r\n  }\r\n  clearUser() {\r\n    this.user = null;\r\n  }\r\n  clearToken() {\r\n    this.token = null;\r\n  }\r\n\r\n  setUser(user: User) {\r\n    this.user = user;\r\n    \r\n  }\r\n  setToken(token: string) {\r\n    this.token = token;\r\n  }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  apiServer: '/'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"names":["sha512","i0","LoginComponent","constructor","httpService","userService","router","ngOnInit","onConnectButtonClick","loginRunning","clearToken","clearUser","errorMessage","hash","password","login","subscribe","next","response","setToken","token","setUser","user","navigate","error","err","message","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"webpack:///"}