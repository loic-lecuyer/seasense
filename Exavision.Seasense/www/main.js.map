{"version":3,"file":"main.js","mappings":"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","sources":["./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/components/header/header.component.ts","./src/app/components/header/header.component.html","./src/app/guards/jwt-guard.ts","./src/app/pages/configuration/configuration.component.ts","./src/app/pages/configuration/configuration.component.html","./src/app/pages/home/home.component.ts","./src/app/pages/login/login.component.ts","./src/app/pages/login/login.component.html","./src/app/services/http.service.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { JwtGuard } from './guards/jwt-guard';\r\nimport { ConfigurationComponent } from './pages/configuration/configuration.component';\r\nimport { HomeComponent } from './pages/home/home.component';\r\nimport { LoginComponent } from './pages/login/login.component';\r\nimport { MatTooltipModule } from '@angular/material/tooltip';\r\nconst routes: Routes = [\r\n  { path: '', redirectTo: '/home', pathMatch: 'full' },\r\n  { path: 'home', component: HomeComponent, canActivate: [JwtGuard]},\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'configuration', component: ConfigurationComponent }  \r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [\r\n    RouterModule,\r\n    MatTooltipModule\r\n  ]\r\n})\r\nexport class AppRoutingModule { }\r\n","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\nexport class AppComponent {\r\n  title = 'seasense-client';\r\n}\r\n","<app-header></app-header>\r\n<router-outlet></router-outlet>\r\n","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { HomeComponent } from './pages/home/home.component';\r\nimport { LoginComponent } from './pages/login/login.component';\r\nimport { ConfigurationComponent } from './pages/configuration/configuration.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HeaderComponent } from './components/header/header.component';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpService } from './services/http.service';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    LoginComponent,\r\n    ConfigurationComponent,\r\n    HeaderComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    MatButtonModule,\r\n    MatToolbarModule,\r\n    MatCardModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatInputModule ,\r\n    FormsModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [HttpService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  styleUrls: ['./header.component.scss']\n})\nexport class HeaderComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n  onHomeClick() {\n  }\n}\n","<mat-toolbar color=\"primary\">\r\n  <div>\r\n    <div matTooltip=\"Go to home page\" (click)=\"onHomeClick()\" class=\"title\">Seasens</div>\r\n    <div matTooltip=\"Go to home page\" (click)=\"onHomeClick()\" class=\"sub-title\">By Exavision</div>\r\n  </div>\r\n</mat-toolbar>\r\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class JwtGuard implements CanActivate {\n  constructor(private router: Router) { }\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot): Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n    console.log(\"Check JwtGuard\");\n    return this.router.parseUrl('/login');\n  }\n  \n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-configuration',\n  templateUrl: './configuration.component.html',\n  styleUrls: ['./configuration.component.scss']\n})\nexport class ConfigurationComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","<p>configuration works!</p>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { sha512 } from 'js-sha512';\r\nimport { HttpService } from '../../services/http.service';\r\n\r\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  public login: string = \"\";\n  public password: string = \"\";\n  constructor(private httpService: HttpService) { }\n\n  ngOnInit(): void {\n  }\n  async onConnectButtonClick() {\n    let hash: string = sha512(this.password);\n    let logged : boolean = await this.httpService.login(this.login, hash);\n    console.log(\"try login \" + this.login + \" \" + this.password);\n  }\n\n}\n\n","<mat-card class=\"card-login\">\r\n  <mat-card-header>   \r\n    <mat-card-title><mat-icon class=\"icon-title\">face</mat-icon>Authentification</mat-card-title>\r\n    <mat-card-subtitle>Please identify yourself</mat-card-subtitle>\r\n  </mat-card-header>  \r\n  <mat-card-content>\r\n    <mat-form-field class=\"full-width\" >\r\n      <mat-label>Login</mat-label>\r\n      <input [(ngModel)]=\"login\"  matInput>\r\n    </mat-form-field>\r\n    <mat-form-field class=\"full-width\" >\r\n      <mat-label>Password</mat-label>\r\n      <input  [(ngModel)]=\"password\" type=\"password\" matInput>\r\n    </mat-form-field>\r\n  </mat-card-content>\r\n  <mat-card-actions>\r\n    <button class=\"full-width\" (click)=\"onConnectButtonClick()\" mat-button>Connect</button>\r\n\r\n  </mat-card-actions>\r\n</mat-card>\r\n\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { environment } from '../../environments/environment';\r\nimport { LoginRequest } from '../api/http/login-request';\r\nimport { LoginResponse } from '../api/http/login-response';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class HttpService {\r\n  private baseApiUrl: string = \"\";\r\n  constructor(private http: HttpClient) {\r\n  }\r\n  getApiUrl(path : string): string{\r\n    if (this.baseApiUrl == \"\") {\r\n      let url: string = \"\";\r\n      if (location.protocol !== 'https:') {\r\n        url += \"http://\";\r\n      }\r\n      else {\r\n        url += \"https://\";\r\n      }\r\n      url += window.location.hostname;\r\n      url += \":\";\r\n      url += window.location.port;\r\n      url += \"/api/\";     \r\n      this.baseApiUrl = url;\r\n    }\r\n    let pathUrl: string = this.baseApiUrl  + path;\r\n    return pathUrl;\r\n  }\r\n  async login(login: string, hash: string): Promise<boolean> {\r\n    let success: boolean = false;\r\n    let req: LoginRequest = {\r\n      login: login,\r\n      passwordHash: hash\r\n    };\r\n    let url: string = this.getApiUrl(\"login\");\r\n    console.log('call ' + url);\r\n   \r\n    await this.http.post(url, req).subscribe(data => {\r\n      success = true;\r\n    },(err) => { success = false; });  \r\n    return success;\r\n  }\r\n \r\n  \r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false,\r\n  apiServer: '/'\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/plugins/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"names":["sha512","LoginComponent","constructor","httpService","ngOnInit","onConnectButtonClick","hash","password","logged","login","console","log","i0","selectors","decls","vars","consts","template","ctx","HttpService","http","getApiUrl","path","baseApiUrl","url","location","protocol","window","hostname","port","pathUrl","success","req","passwordHash","post","subscribe","data","err","factory","providedIn"],"sourceRoot":"webpack:///"}